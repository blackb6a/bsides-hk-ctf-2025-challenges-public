import os
import secrets
from KZG import PolyCommit, r, G1, G2

banner = """
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£Ñ‚£†‚£Ñ‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚£ø‚†è‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°§‚£§‚†∂‚†õ‚†â‚†â‚†Ä‚†Ä‚†â‚†â‚†õ‚†≤‚£§‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚°º‚†É‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Å‚†à‚¢ß‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚°º‚¢Å‚°Ü‚†Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°Ñ‚†Ä‚¢∞‚°à‚¢ß‚†Ä‚†Ä‚†Ä
‚¢Ä‚°û‚†Å‚£∏‚†Å‚†Ä‚¢†‚†¨‚†ì‚†Ä‚£Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†õ‚†•‚£Ñ‚†Ä‚†Ä‚°á‚†à‚¢≥‚°Ä‚†Ä
‚°û‚†Ä‚†Ä‚†π‚£Ü‚¢∞‚£í‚†Ü‚†Ä‚†Ä‚†ì‚†ä‚†ô‚†ö‚†Å‚†Ä‚†∏‚†≠‚†á‚£∞‚†á‚†Ä‚†Ä‚¢ª‚†Ä
‚£á‚†Ä‚†Ä‚†Ä‚†à‚£π‚†∂‚†¶‚†§‚†§‚£§‚£§‚£§‚°§‚†§‚†§‚†¥‚†∂‚£è‚†Å‚†Ä‚†Ä‚†Ä‚£∏‚†Å
‚†à‚†ì‚†≤‚†ñ‚†ö‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ì‚†≤‚†∂‚†ö‚†Å‚†Ä
"""


def stylish_input() -> str:
    return input("( -_‚Ä¢)‚ñÑÔ∏ª„ÉÜÿ≠ŸÉŸÄ‚îÅ‰∏Äüí• ")


def main() -> bool:
    for _ in range(32):
        # binary -> bit, ternary -> tit
        tit = secrets.randbelow(3)

        # generate new CRS ('. ‚Ä¢ ·µï ‚Ä¢. `)
        pc = PolyCommit()
        pc.setup(32)
        assert pc.crs and pc.crs2

        if tit == 1:
            pc.crs[secrets.randbelow(32)] *= secrets.randbelow(r)
        elif tit == 2:
            pc.crs2 *= secrets.randbelow(r)

        print(pc.dumps_crs().hex())

        # i wonder what bit is... (‚Ä¢ÿé ‚Ä¢)
        if int(stylish_input()) != tit:
            return False

    return True


if __name__ == "__main__":
    print(banner)
    assert main()

    FLAG = os.getenv("FLAG") or "bsideshk{placeholder_flag}"
    print("‚ù§Ô∏é", FLAG)
